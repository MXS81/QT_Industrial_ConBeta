// JogControlPage.cpp
#include "JogControlPage.h"
#include "TrackWidget.h"
#include "MainWindow.h"
#include "LogWidget.h"
#include <QVBoxLayout>
#include <QSplitter>
#include <QHBoxLayout>
#include <QGridLayout>
#include <QSlider>
#include <QPushButton>
#include <QLabel>
#include <QTextEdit>
#include <QTimer>
#include <QSpinBox>
#include <QComboBox>
#include <QDateTime>
#include <QMessageBox>
#include <QScrollArea>
#include <QScrollBar>
#include <QAbstractSpinBox>
#include <QDebug>
#include <QCheckBox>
#include <QGroupBox>

const double JogControlPage::TRACK_LENGTH = 7455.75;
const double JogControlPage::SAFETY_DISTANCE = 100.0;

JogControlPage::JogControlPage(QList<MoverData> *movers, const QString& currentUser, ModbusManager *modbusManager, QWidget *parent)
    : QWidget(parent)
    , m_movers(movers)
    , m_selectedMover(0)
    , m_currentUser(currentUser)
    , m_modbusManager(modbusManager)
    , m_longPressTimer(new QTimer(this))
    , m_continuousJogTimer(new QTimer(this))
    , m_realTimeUpdateTimer(new QTimer(this))
    , m_isRealTimeEnabled(false)
    , m_isLongPressing(false)
    , m_isContinuousJogging(false)
    , m_jogDirection(true)
    , m_autoRunTimer(new QTimer(this))
    , m_isAutoRunActive(false)
    , m_isAutoRunPaused(false)
    , m_autoRunStartBtn(nullptr)
    , m_autoRunPauseBtn(nullptr)
    , m_autoRunStopBtn(nullptr)
    , m_autoRunGroup(nullptr)
    , m_autoRunEnableCheckBox(nullptr)
    , m_mainWindow(qobject_cast<MainWindow*>(parent))
{
    // ËÆæÁΩÆÂÆöÊó∂Âô®
    m_longPressTimer->setSingleShot(true);
    m_realTimeUpdateTimer->setSingleShot(false);
    m_continuousJogTimer->setSingleShot(false);
    m_autoRunTimer->setInterval(AUTO_RUN_INTERVAL);

    // ËøûÊé•ÂÆöÊó∂Âô®‰ø°Âè∑
    connect(m_longPressTimer, &QTimer::timeout, this, &JogControlPage::startContinuousJog);
    connect(m_continuousJogTimer, &QTimer::timeout, this, &JogControlPage::performContinuousJog);
    connect(m_realTimeUpdateTimer, &QTimer::timeout, this, &JogControlPage::onRealTimeDataUpdate);
    connect(m_autoRunTimer, &QTimer::timeout, this, &JogControlPage::performAutoRunStep);

    setupUI();
    updateMoverInfo();

    addLogEntry(QString("JogÊéßÂà∂È°µÈù¢Â∑≤Âä†ËΩΩ - Êìç‰ΩúÂëò: %1").arg(m_currentUser), "success");

    if (m_modbusManager && m_modbusManager->isConnected()) {
        startRealTimeUpdates();
    } else {
        setControlsEnabled(false);
        addLogEntry("PLCÊú™ËøûÊé•ÔºåËØ∑ËøûÊé•PLC‰ª•ÂêØÁî®ÊéßÂà∂ÂäüËÉΩ„ÄÇ", "warning");
    }


    // Âú®ÊûÑÈÄ†ÂáΩÊï∞ÁöÑÊúÄÂêéÊ∑ªÂä†
    if (m_mainWindow) {
            connect(m_mainWindow, &MainWindow::emergencyStopTriggered, this, &JogControlPage::onEmergencyStopTriggered);
            connect(m_mainWindow, &MainWindow::emergencyStopReset, this, &JogControlPage::onEmergencyStopReset);
    }

}

JogControlPage::~JogControlPage()
{
    stopLongPressDetection();
}

void JogControlPage::setupUI()
{
    QVBoxLayout *mainLayout = new QVBoxLayout(this);

    // È°∂ÈÉ®Áî®Êà∑‰ø°ÊÅØ
    QLabel *userInfoLabel = new QLabel(QString("üë§ Êìç‰ΩúÂëò: %1").arg(m_currentUser));
    userInfoLabel->setStyleSheet("color: #00ff41; font-size: 13px; font-weight: bold;");
    mainLayout->addWidget(userInfoLabel);

    // ÂàõÂª∫‰∏ªË¶ÅÁöÑÊ∞¥Âπ≥Â∏ÉÂ±Ä
    QHBoxLayout *topLayout = new QHBoxLayout();

    // ÊèêÂâçÂàõÂª∫Ëá™Âä®ËøêË°åUIÔºå‰ª•‰æøÁßªÂä®Âà∞Â∑¶‰æßÈù¢Êùø
    setupAutoRunUI();

    // Â∑¶‰æßÈù¢ÊùøÔºöÊéßÂà∂Èù¢Êùø
    QWidget *leftPanel = new QWidget();
    QVBoxLayout *leftLayout = new QVBoxLayout(leftPanel);
    leftPanel->setMaximumWidth(300);
    leftPanel->setMinimumWidth(280);

    // === Âä®Â≠êÈÄâÊã©ÁªÑ ===
    QGroupBox *selectionGroup = new QGroupBox("Âä®Â≠êÈÄâÊã©");
    selectionGroup->setStyleSheet(R"(
        QGroupBox {
            font-size: 12px;
            font-weight: bold;
            border: 2px solid #533483;
            border-radius: 6px;
            margin-top: 10px;
            padding-top: 8px;
            background-color: #16213e;
            color: white;
        }
        QGroupBox::title {
            subcontrol-origin: margin;
            left: 8px;
            padding: 0 8px 0 8px;
        }
    )");

    QVBoxLayout *selectionLayout = new QVBoxLayout(selectionGroup);
    m_moverSelector = new QComboBox();
    updateMoverSelector();
    selectionLayout->addWidget(m_moverSelector);

    // === ‰ΩøËÉΩÊéßÂà∂ÁªÑ ===
    m_enableGroup = new QGroupBox("Âä®Â≠ê‰ΩøËÉΩÊéßÂà∂");
    m_enableGroup->setStyleSheet(R"(
        QGroupBox {
            font-size: 12px;
            font-weight: bold;
            border: 2px solid #533483;
            border-radius: 6px;
            margin-top: 10px;
            padding-top: 8px;
            background-color: #16213e;
            color: white;
        }
        QGroupBox::title {
            subcontrol-origin: margin;
            left: 8px;
            padding: 0 8px 0 8px;
        }
    )");

    QVBoxLayout *enableLayout = new QVBoxLayout(m_enableGroup);

    // ‰ΩøËÉΩÁä∂ÊÄÅÊòæÁ§∫
    m_enableStatusLabel = new QLabel("Áä∂ÊÄÅ: Êú™Áü•");
    m_enableStatusLabel->setStyleSheet(R"(
        QLabel {
            color: #fbbf24;
            font-size: 11px;
            font-weight: bold;
            background-color: rgba(251, 191, 36, 0.1);
            border: 1px solid rgba(251, 191, 36, 0.3);
            border-radius: 4px;
            padding: 5px;
        }
    )");
    m_enableStatusLabel->setAlignment(Qt::AlignCenter);

    // ‰ΩøËÉΩÊéßÂà∂ÊåâÈíÆ
    QWidget *enableButtonWidget = new QWidget();
    QHBoxLayout *enableButtonLayout = new QHBoxLayout(enableButtonWidget);

    m_enableBtn = new QPushButton("‰ΩøËÉΩ");
    m_disableBtn = new QPushButton("Á¶ÅÁî®");

    QString enableBtnStyle = R"(
        QPushButton {
            background-color: #22c55e;
            color: white;
            border: none;
            padding: 6px 12px;
            font-size: 11px;
            font-weight: bold;
            border-radius: 4px;
        }
        QPushButton:hover { background-color: #16a34a; }
    )";

    QString disableBtnStyle = enableBtnStyle;
    disableBtnStyle.replace("#22c55e", "#ef4444").replace("#16a34a", "#dc2626");

    m_enableBtn->setStyleSheet(enableBtnStyle);
    m_disableBtn->setStyleSheet(disableBtnStyle);

    enableButtonLayout->addWidget(m_enableBtn);
    enableButtonLayout->addWidget(m_disableBtn);

    enableLayout->addWidget(m_enableStatusLabel);
    enableLayout->addWidget(enableButtonWidget);

    // === ÂΩìÂâçÁä∂ÊÄÅÁªÑÔºàÂàõÂª∫‰ΩÜ‰∏çÊòæÁ§∫Ôºâ ===
    m_currentStatusGroup = new QGroupBox("ÂΩìÂâçÁä∂ÊÄÅ");
    m_currentStatusGroup->setStyleSheet(R"(
        QGroupBox {
            font-size: 12px;
            font-weight: bold;
            border: 2px solid #533483;
            border-radius: 6px;
            margin-top: 10px;
            padding-top: 8px;
            background-color: #16213e;
            color: white;
        }
        QGroupBox::title {
            subcontrol-origin: margin;
            left: 8px;
            padding: 0 8px 0 8px;
        }
    )");

    QGridLayout *statusLayout = new QGridLayout(m_currentStatusGroup);
    statusLayout->setSpacing(5);

    QLabel *posLabel = new QLabel("‰ΩçÁΩÆ:");
    posLabel->setStyleSheet("color: white; font-size: 11px;");
    m_positionLabel = new QLabel("0.0 mm");
    m_positionLabel->setStyleSheet("color: #00ff41; font-weight: bold; font-size: 11px;");

    QLabel *spdLabel = new QLabel("ÈÄüÂ∫¶:");
    spdLabel->setStyleSheet("color: white; font-size: 11px;");
    m_speedLabel = new QLabel("0.0 mm/s");
    m_speedLabel->setStyleSheet("color: #00ff41; font-weight: bold; font-size: 11px;");

    QLabel *stLabel = new QLabel("Áä∂ÊÄÅ:");
    stLabel->setStyleSheet("color: white; font-size: 11px;");
    m_statusLabel = new QLabel("Êú™Áü•");
    m_statusLabel->setStyleSheet("color: #fbbf24; font-weight: bold; font-size: 11px;");

    statusLayout->addWidget(posLabel, 0, 0);
    statusLayout->addWidget(m_positionLabel, 0, 1);
    statusLayout->addWidget(spdLabel, 1, 0);
    statusLayout->addWidget(m_speedLabel, 1, 1);
    statusLayout->addWidget(stLabel, 2, 0);
    statusLayout->addWidget(m_statusLabel, 2, 1);

    // === ‰ΩçÁΩÆÊéßÂà∂ÁªÑ (MOVED) ===
    QGroupBox *positionGroup = new QGroupBox("‰ΩçÁΩÆÊéßÂà∂");
    positionGroup->setStyleSheet(R"(
        QGroupBox {
            font-size: 12px;
            font-weight: bold;
            border: 2px solid #533483;
            border-radius: 6px;
            margin-top: 10px;
            padding-top: 8px;
            background-color: #16213e;
            color: white;
        }
        QGroupBox::title {
            subcontrol-origin: margin;
            left: 8px;
            padding: 0 8px 0 8px;
        }
    )");

    QGridLayout *positionLayout = new QGridLayout(positionGroup);

    QLabel *targetLabel = new QLabel("ÁõÆÊ†á‰ΩçÁΩÆ:");
    targetLabel->setStyleSheet("color: white; font-size: 11px;");
    m_targetPosSpinBox = new QDoubleSpinBox();
    m_targetPosSpinBox->setRange(0, TRACK_LENGTH);
    m_targetPosSpinBox->setSuffix(" mm");
    m_targetPosSpinBox->setDecimals(1);
    m_targetPosSpinBox->setStyleSheet(R"(
        QDoubleSpinBox {
            background-color: #16213e;
            color: white;
            border: 1px solid #533483;
            padding: 3px;
            border-radius: 4px;
        }
    )");

    QLabel *speedLabel2 = new QLabel("ÁßªÂä®ÈÄüÂ∫¶:");
    speedLabel2->setStyleSheet("color: white; font-size: 11px;");
    m_speedSpinBox = new QSpinBox();
    m_speedSpinBox->setRange(10, 1000); // ËÆæÁΩÆÈÄüÂ∫¶ËåÉÂõ¥
    m_speedSpinBox->setValue(100);      // ËÆæÁΩÆÈªòËÆ§ÈÄüÂ∫¶
    m_speedSpinBox->setSuffix(" mm/s");  // Ê∑ªÂä†Âçï‰ΩçÂêéÁºÄ
    m_speedSpinBox->setStyleSheet(R"(
    QSpinBox {
        background-color: #16213e;
        color: white;
        border: 1px solid #533483;
        padding: 3px;
        border-radius: 4px;
    }
)");

    m_goToBtn = new QPushButton("ÁßªÂä®Âà∞‰ΩçÁΩÆ");
    m_stopBtn = new QPushButton("ÂÅúÊ≠¢");

    QString controlBtnStyle = R"(
        QPushButton {
            background-color: #22c55e;
            color: white;
            border: none;
            padding: 8px 15px;
            font-size: 12px;
            font-weight: bold;
            border-radius: 5px;
        }
        QPushButton:hover { background-color: #16a34a; }
    )";
    m_goToBtn->setStyleSheet(controlBtnStyle);
    m_stopBtn->setStyleSheet(controlBtnStyle.replace("#22c55e", "#ef4444").replace("#16a34a", "#dc2626"));

    positionLayout->addWidget(targetLabel, 0, 0);
    positionLayout->addWidget(m_targetPosSpinBox, 0, 1, 1, 2);
    positionLayout->addWidget(speedLabel2, 1, 0);
    positionLayout->addWidget(m_speedSpinBox, 1, 1, 1, 2);
    positionLayout->addWidget(m_goToBtn, 2, 0, 1, 3);
    positionLayout->addWidget(m_stopBtn, 3, 0, 1, 3);

    // === JOGÊéßÂà∂ÁªÑ ===
    QGroupBox *jogGroup = new QGroupBox("JogÊéßÂà∂ (ÂçïÂáª/ÈïøÊåâ)");
    jogGroup->setStyleSheet(R"(
        QGroupBox {
            font-size: 12px;
            font-weight: bold;
            border: 2px solid #533483;
            border-radius: 6px;
            margin-top: 10px;
            padding-top: 8px;
            background-color: #16213e;
            color: white;
        }
        QGroupBox::title {
            subcontrol-origin: margin;
            left: 8px;
            padding: 0 8px 0 8px;
        }
    )");

    QVBoxLayout *jogLayout = new QVBoxLayout(jogGroup);

    QLabel *stepLabel = new QLabel("Ê≠•Èïø:");
    stepLabel->setStyleSheet("color: white; font-size: 11px;");
    m_jogStepSpinBox = new QSpinBox();
    m_jogStepSpinBox->setRange(1, 1000);
    m_jogStepSpinBox->setValue(10);
    m_jogStepSpinBox->setSuffix(" mm");
    m_jogStepSpinBox->setStyleSheet(R"(
        QSpinBox {
            background-color: #16213e;
            color: white;
            border: 1px solid #533483;
            padding: 3px;
            border-radius: 4px;
        }
    )");

    QHBoxLayout *stepLayout = new QHBoxLayout();
    stepLayout->addWidget(stepLabel);
    stepLayout->addWidget(m_jogStepSpinBox);
    jogLayout->addLayout(stepLayout);

    QHBoxLayout *jogButtonLayout = new QHBoxLayout();
    m_jogForwardBtn = new QPushButton("‚óÄ ÂêéÈÄÄ");
    m_jogBackwardBtn = new QPushButton("ÂâçËøõ ‚ñ∂");

    QString jogBtnStyle = R"(
        QPushButton {
            background-color: #3b82f6;
            color: white;
            border: none;
            padding: 10px 15px;
            font-size: 12px;
            font-weight: bold;
            border-radius: 6px;
        }
        QPushButton:hover { background-color: #2563eb; }
        QPushButton:pressed { background-color: #1d4ed8; }
    )";

    m_jogForwardBtn->setStyleSheet(jogBtnStyle);
    m_jogBackwardBtn->setStyleSheet(jogBtnStyle);

    jogButtonLayout->addWidget(m_jogForwardBtn);
    jogButtonLayout->addWidget(m_jogBackwardBtn);
    jogLayout->addLayout(jogButtonLayout);

    // Â∞ÜÂ∑¶‰æßÁªÑ‰ª∂Ê∑ªÂä†Âà∞Â∑¶‰æßÂ∏ÉÂ±Ä
    leftLayout->addWidget(selectionGroup);
    leftLayout->addWidget(m_enableGroup);
    leftLayout->addWidget(positionGroup);
    leftLayout->addWidget(jogGroup);
    if (m_autoRunGroup) {
        leftLayout->addWidget(m_autoRunGroup);
    }
    leftLayout->addStretch();

    // Âè≥‰æßÈù¢ÊùøÔºö‰ΩçÁΩÆÊéßÂà∂ÂíåÊó•Âøó
    QWidget *rightPanel = new QWidget();
    QVBoxLayout *rightLayout = new QVBoxLayout(rightPanel);
    rightPanel->setMaximumWidth(300);
    rightPanel->setMinimumWidth(280);

    // === Êìç‰ΩúÊó•ÂøóÁªÑ ===
    QGroupBox *logGroup = new QGroupBox("Êìç‰ΩúÊó•Âøó");
    logGroup->setStyleSheet(R"(
        QGroupBox {
            font-size: 12px;
            font-weight: bold;
            border: 2px solid #533483;
            border-radius: 6px;
            margin-top: 10px;
            padding-top: 8px;
            background-color: #16213e;
            color: white;
        }
        QGroupBox::title {
            subcontrol-origin: margin;
            left: 8px;
            padding: 0 8px 0 8px;
        }
    )");
    QVBoxLayout *logLayout = new QVBoxLayout(logGroup);

    m_logWidget = new LogWidget();
    m_logWidget->setMinimumHeight(150);
    logLayout->addWidget(m_logWidget);

    rightLayout->addWidget(logGroup);
    rightLayout->addStretch();

    // ‰∏≠Èó¥ÔºöËΩ®ÈÅìËßÜÂõæÔºàÁªô‰∫àÊúÄÂ§ßÁ©∫Èó¥Ôºâ
    QWidget *centerPanel = new QWidget();
    QVBoxLayout *centerLayout = new QVBoxLayout(centerPanel);

    // ËΩ®ÈÅìËßÜÂõæÁªÑ
    QGroupBox *trackGroup = new QGroupBox("ËΩ®ÈÅìÂèØËßÜÂåñ");
    trackGroup->setStyleSheet(R"(
        QGroupBox {
            font-size: 13px;
            font-weight: bold;
            border: 2px solid #533483;
            border-radius: 6px;
            margin-top: 10px;
            padding-top: 8px;
            background-color: #16213e;
            color: white;
        }
        QGroupBox::title {
            subcontrol-origin: margin;
            left: 8px;
            padding: 0 8px 0 8px;
        }
    )");
    QVBoxLayout *trackLayout = new QVBoxLayout(trackGroup);

    QString trackBtnStyle = R"(
        QPushButton {
            background-color: #6b7280;
            color: white;
            border: none;
            padding: 6px 12px;
            font-size: 11px;
            border-radius: 4px;
        }
        QPushButton:hover { background-color: #4b5563; }
    )";

    // ËΩ®ÈÅìËßÜÂõæ
    m_trackWidget = new TrackWidget(this);
    m_trackScrollArea = new QScrollArea();
    m_trackScrollArea->setWidget(m_trackWidget);
    m_trackScrollArea->setWidgetResizable(true);
    m_trackScrollArea->setMinimumHeight(300);

    trackLayout->addWidget(m_trackScrollArea);
    centerLayout->addWidget(trackGroup);

    // Â∞Ü‰∏â‰∏™Èù¢ÊùøÊ∑ªÂä†Âà∞È°∂ÈÉ®Â∏ÉÂ±Ä
    topLayout->addWidget(leftPanel);
    topLayout->addWidget(centerPanel, 3);
    topLayout->addWidget(rightPanel);

    // Â∞ÜÈ°∂ÈÉ®Â∏ÉÂ±ÄÊ∑ªÂä†Âà∞‰∏ªÂ∏ÉÂ±Ä
    mainLayout->addLayout(topLayout);

    // ËøûÊé•‰ø°Âè∑
    connect(m_moverSelector, QOverload<int>::of(&QComboBox::currentIndexChanged),
            this, &JogControlPage::onMoverSelectionChanged);

    connect(m_jogForwardBtn, &QPushButton::pressed, this, &JogControlPage::onJogForwardPressed);
    connect(m_jogForwardBtn, &QPushButton::released, this, &JogControlPage::onJogForwardReleased);
    connect(m_jogBackwardBtn, &QPushButton::pressed, this, &JogControlPage::onJogBackwardPressed);
    connect(m_jogBackwardBtn, &QPushButton::released, this, &JogControlPage::onJogBackwardReleased);
    connect(m_goToBtn, &QPushButton::clicked, this, &JogControlPage::onGoToPosition);
    connect(m_stopBtn, &QPushButton::clicked, this, &JogControlPage::onStopMover);

    connect(m_enableBtn, &QPushButton::clicked, this, [this]() {
        onEnableStateChanged(true);
    });
    connect(m_disableBtn, &QPushButton::clicked, this, [this]() {
        onEnableStateChanged(false);
    });
}

void JogControlPage::setupAutoRunUI()
{
    try {
        m_autoRunGroup = new QGroupBox("Âä®Â≠êËá™Âä®ËøêË°å");
        if (!m_autoRunGroup) {
            qCritical() << "Failed to create autorun group box";
            return;
        }

        m_autoRunGroup->setStyleSheet(R"(
            QGroupBox {
                font-size: 13px;
                font-weight: bold;
                border: 2px solid #533483;
                border-radius: 8px;
                margin-top: 12px;
                padding-top: 8px;
                background-color: #16213e;
                color: white;
            }
            QGroupBox::title {
                subcontrol-origin: margin;
                left: 8px;
                padding: 0 8px 0 8px;
                color: #f8fafc;
            }
        )");

        QVBoxLayout *autoLayout = new QVBoxLayout(m_autoRunGroup);

        // ÊéßÂà∂Âå∫Âüü
        QHBoxLayout *controlLayout = new QHBoxLayout();

        m_autoRunEnableCheckBox = new QCheckBox("ÂêØÁî®");
        m_autoRunEnableCheckBox->setStyleSheet(R"(
            QCheckBox {
                font-size: 12px;
                color: white;
                padding: 5px;
            }
            QCheckBox::indicator {
                width: 16px;
                height: 16px;
                border: 2px solid #533483;
                border-radius: 3px;
                background-color: #16213e;
            }
            QCheckBox::indicator:checked {
                background-color: #22c55e;
                border-color: #22c55e;
            }
        )");

        // ÊéßÂà∂ÊåâÈíÆ
        m_autoRunStartBtn = new QPushButton("ÂºÄÂßã");
        m_autoRunPauseBtn = new QPushButton("ÊöÇÂÅú");
        m_autoRunStopBtn = new QPushButton("ÂÅúÊ≠¢");

        QString btnStyle = R"(
            QPushButton {
                background-color: #533483;
                color: white;
                border: none;
                padding: 6px 12px;
                font-size: 11px;
                font-weight: bold;
                border-radius: 4px;
            }
            QPushButton:hover { background-color: #e94560; }
            QPushButton:disabled { background-color: #555555; color: #888888; }
        )";

        m_autoRunStartBtn->setStyleSheet(btnStyle);
        m_autoRunPauseBtn->setStyleSheet(btnStyle);
        m_autoRunStopBtn->setStyleSheet(btnStyle);

        // ÂàùÂßãÁä∂ÊÄÅÔºöÁ¶ÅÁî®ÊéßÂà∂ÊåâÈíÆ
        m_autoRunStartBtn->setEnabled(false);
        m_autoRunPauseBtn->setEnabled(false);
        m_autoRunStopBtn->setEnabled(false);

        controlLayout->addWidget(m_autoRunEnableCheckBox);
        controlLayout->addStretch();
        controlLayout->addWidget(m_autoRunStartBtn);
        controlLayout->addWidget(m_autoRunPauseBtn);
        controlLayout->addWidget(m_autoRunStopBtn);

        autoLayout->addLayout(controlLayout);

        // ËøûÊé•‰ø°Âè∑
        connectAutoRunSignals();

    } catch (const std::exception& e) {
        qDebug() << "ÂàõÂª∫Ëá™Âä®ËøêË°åUIÂºÇÂ∏∏:" << e.what();
    } catch (...) {
        qDebug() << "ÂàõÂª∫Ëá™Âä®ËøêË°åUIÂèëÁîüÊú™Áü•ÂºÇÂ∏∏";
    }
}

/**
 * @brief ËæÖÂä©ÂáΩÊï∞ÔºåÁî®‰∫éÁªü‰∏ÄËÆæÁΩÆÊâÄÊúâÊéßÂà∂ÁªÑ‰ª∂ÁöÑ‰ΩøËÉΩÁä∂ÊÄÅ
 * @param enabled true‰∏∫ÂêØÁî®Ôºåfalse‰∏∫Á¶ÅÁî®
 */
void JogControlPage::setControlsEnabled(bool enabled)
{
    // ‰ΩøËÉΩ/Á¶ÅÁî®ÊâÄÊúâ‰∏éPLC‰∫§‰∫íÁöÑÊåâÈíÆÂíåËæìÂÖ•Ê°Ü
    if (m_enableBtn) m_enableBtn->setEnabled(enabled);
    if (m_disableBtn) m_disableBtn->setEnabled(enabled);
    if (m_goToBtn) m_goToBtn->setEnabled(enabled);
    if (m_stopBtn) m_stopBtn->setEnabled(enabled);
    if (m_jogForwardBtn) m_jogForwardBtn->setEnabled(enabled);
    if (m_jogBackwardBtn) m_jogBackwardBtn->setEnabled(enabled);
    if (m_autoRunGroup) m_autoRunGroup->setEnabled(enabled);
    if (m_targetPosSpinBox) m_targetPosSpinBox->setEnabled(enabled);
    if (m_speedSpinBox) m_speedSpinBox->setEnabled(enabled);
    if (m_jogStepSpinBox) m_jogStepSpinBox->setEnabled(enabled);

    if (!enabled) {
        addLogEntry("ÊâÄÊúâÊéß‰ª∂Â∑≤Á¶ÅÁî®ÔºåËØ∑ËøûÊé•PLC„ÄÇ", "warning");
    } else {
        addLogEntry("PLCÂ∑≤ËøûÊé•ÔºåÊéß‰ª∂Â∑≤ÂêØÁî®„ÄÇ", "success");
    }
}

// Êõ¥Êñ∞Âä®Â≠êÈÄâÊã©Âô®
void JogControlPage::updateMoverSelector()
{
    if (!m_moverSelector || !m_movers) return;

    m_moverSelector->clear();
    for (int i = 0; i < m_movers->size(); ++i) {
        m_moverSelector->addItem(QString("Âä®Â≠ê %1").arg(i));
    }

    // Â¶ÇÊûúÂè™Êúâ‰∏Ä‰∏™Âä®Â≠êÔºåÈöêËóèÈÄâÊã©Âô®ÊàñÁ¶ÅÁî®
    if (m_movers->size() == 1) {
        m_moverSelector->setEnabled(false);
        m_moverSelector->setToolTip("ÂΩìÂâçÁ≥ªÁªüÂè™ÈÖçÁΩÆ‰∫Ü‰∏Ä‰∏™Âä®Â≠ê");
    } else {
        m_moverSelector->setEnabled(true);
        m_moverSelector->setToolTip("ÈÄâÊã©Ë¶ÅÊéßÂà∂ÁöÑÂä®Â≠ê");
    }
}

// Ëá™Âä®ËøêË°åÊéßÂà∂ÊñπÊ≥ïÂÆûÁé∞
/**
 * @brief ÂêØÂä®/ÂÅúÊ≠¢Ëá™Âä®ËøêË°åÊ®°Âºè
 */
void JogControlPage::onAutoRunModeToggled(bool enabled) {
    if (enabled) {
        m_autoRunStartBtn->setEnabled(true);
        addLogEntry("Ëá™Âä®ËøêË°åÊ®°ÂºèÂ∑≤ÂêØÁî®", "info");
    } else {
        if (m_isAutoRunActive) {
            onAutoRunStop();
        }
        m_autoRunStartBtn->setEnabled(false);
        m_autoRunPauseBtn->setEnabled(false);
        m_autoRunStopBtn->setEnabled(false);
        addLogEntry("Ëá™Âä®ËøêË°åÊ®°ÂºèÂ∑≤ÂÖ≥Èó≠", "info");
    }
}

// ÂÆâÂÖ®ËøûÊé•‰ø°Âè∑
void JogControlPage::connectAutoRunSignals()
{
    try {
        if (m_autoRunEnableCheckBox) {
            connect(m_autoRunEnableCheckBox, &QCheckBox::toggled,
                    this, &JogControlPage::onAutoRunModeToggled);
        }

        if (m_autoRunStartBtn) {
            connect(m_autoRunStartBtn, &QPushButton::clicked,
                    this, &JogControlPage::onAutoRunStart);
        }

        if (m_autoRunPauseBtn) {
            connect(m_autoRunPauseBtn, &QPushButton::clicked,
                    this, &JogControlPage::onAutoRunPause);
        }

        if (m_autoRunStopBtn) {
            connect(m_autoRunStopBtn, &QPushButton::clicked,
                    this, &JogControlPage::onAutoRunStop);
        }

        qDebug() << "Ëá™Âä®ËøêË°å‰ø°Âè∑ËøûÊé•ÂÆåÊàê";

    } catch (const std::exception& e) {
        qCritical() << "ËøûÊé•Ëá™Âä®ËøêË°å‰ø°Âè∑ÂºÇÂ∏∏:" << e.what();
    }
}

/**
 * @brief ÂºÄÂßãËá™Âä®ËøêË°å
 */
void JogControlPage::onAutoRunStart() {
    if (!m_modbusManager || !m_modbusManager->isConnected()) {
        QMessageBox::warning(this, "PLCÊú™ËøûÊé•", "ËØ∑ÂÖàËøûÊé•PLCËÆæÂ§áÔºÅ");
        return;
    }
    m_isAutoRunActive = true;
    m_isAutoRunPaused = false;
    m_autoRunTimer->start();
    m_autoRunStartBtn->setEnabled(false);
    m_autoRunPauseBtn->setEnabled(true);
    m_autoRunStopBtn->setEnabled(true);
    m_autoRunEnableCheckBox->setEnabled(false);
    addLogEntry("Ëá™Âä®ËøêË°åÂ∑≤ÂêØÂä®", "success");
}

/**
 * @brief ÊöÇÂÅú/ÊÅ¢Â§çËá™Âä®ËøêË°å
 */
void JogControlPage::onAutoRunPause() {
    if (m_isAutoRunPaused) {
        m_isAutoRunPaused = false;
        m_autoRunTimer->start();
        m_autoRunPauseBtn->setText("ÊöÇÂÅú");
        addLogEntry("Ëá™Âä®ËøêË°åÂ∑≤ÊÅ¢Â§ç", "info");
    } else {
        m_isAutoRunPaused = true;
        m_autoRunTimer->stop();
        m_autoRunPauseBtn->setText("ÁªßÁª≠");
        addLogEntry("Ëá™Âä®ËøêË°åÂ∑≤ÊöÇÂÅú", "warning");
    }
}

/**
 * @brief ÂÅúÊ≠¢Ëá™Âä®ËøêË°å
 */
void JogControlPage::onAutoRunStop() {
    m_isAutoRunActive = false;
    m_isAutoRunPaused = false;
    m_autoRunTimer->stop();

    // ÂèëÈÄÅÂÅúÊ≠¢ÂëΩ‰ª§ÔºåÁ°Æ‰øùÂä®Â≠êÂÅú‰∏ã
    if (m_modbusManager && m_modbusManager->isConnected()) {
        m_modbusManager->setSingleAxisJog(0);
    }

    m_autoRunStartBtn->setEnabled(true);
    m_autoRunPauseBtn->setEnabled(false);
    m_autoRunPauseBtn->setText("ÊöÇÂÅú");
    m_autoRunStopBtn->setEnabled(false);
    m_autoRunEnableCheckBox->setEnabled(true);
    addLogEntry("Ëá™Âä®ËøêË°åÂ∑≤ÂÅúÊ≠¢", "info");
}


/**
 * @brief Ëá™Âä®ËøêË°åÁöÑÂÆöÊó∂Âô®ÊâßË°åÂáΩÊï∞
 *
 * Ê≠§ÂáΩÊï∞Áé∞Âú®‰ΩøÁî®Êñ∞ÁöÑModbusManagerÊé•Âè£Êù•ÂèëÈÄÅÂë®ÊúüÊÄßÁöÑJOGÂëΩ‰ª§„ÄÇ
 */
void JogControlPage::performAutoRunStep()
{
    if (!m_isAutoRunActive || m_isAutoRunPaused || !m_modbusManager || !m_modbusManager->isConnected()) {
        // Â¶ÇÊûú‰∏≠ÈÄîÊñ≠ÂºÄËøûÊé•ÔºåÂàôÂÅúÊ≠¢Ëá™Âä®ËøêË°å
        if (m_isAutoRunActive) {
            onAutoRunStop();
            addLogEntry("PLCËøûÊé•Êñ≠ÂºÄÔºåËá™Âä®ËøêË°åÂ∑≤ÂÅúÊ≠¢", "error");
        }
        return;
    }

    // ËøôÊòØ‰∏Ä‰∏™ÈùûÂ∏∏ÁÆÄÂçïÁöÑËá™Âä®ËøêË°åÈÄªËæëÔºöÊåÅÁª≠ÂêëÂâçJOG
    // ÂèØ‰ª•Âú®Ê≠§Âü∫Á°Ä‰∏äÊâ©Â±ïÊõ¥Â§çÊùÇÁöÑÈÄªËæëÔºå‰æãÂ¶ÇÂà∞ËææËæπÁïåÂêéÂèçÂêë
    bool isForward = true; // ÂèØÊ†πÊçÆÈúÄË¶Å‰øÆÊîπ‰∏∫Êõ¥Â§çÊùÇÁöÑÈÄªËæë
    int direction = isForward ? 2 : 1; // 2=ÂâçËøõ, 1=ÂêéÈÄÄ

    // ‰ΩøÁî®Êñ∞ÁöÑModbusÊé•Âè£
    m_modbusManager->setSingleAxisRunMode(false); // Á°Æ‰øùÊòØÊâãÂä®/ÁÇπÂä®Ê®°Âºè
    m_modbusManager->setSingleAxisJogSpeed(m_speedSpinBox->value());
    m_modbusManager->setSingleAxisJog(direction);
}

/**
 * @brief Êåâ‰∏ãJOGÊåâÈíÆÔºàÂâçËøõ/ÂêéÈÄÄÔºâ
 *
 * Â¶ÇÊûúPLCÊú™ËøûÊé•ÔºåÂàô‰∏çÊâßË°å‰ªª‰ΩïÊìç‰Ωú„ÄÇ
 */
void JogControlPage::onJogForwardPressed()
{
    if (!m_modbusManager || !m_modbusManager->isConnected()) return;

    m_modbusManager->setSingleAxisRunMode(false); // ËÆæÁΩÆ‰∏∫ÊâãÂä®Ê®°Âºè
    m_modbusManager->setSingleAxisJogSpeed(m_speedSpinBox->value());
    m_modbusManager->setSingleAxisJogPosition(m_jogStepSpinBox->value());
    m_modbusManager->setSingleAxisJog(2); // 2 = ÂêëÂè≥/ÂâçËøõ
    addLogEntry("JOGÂâçËøõÊåâ‰∏ã", "info");
}

/**
 * @brief ÊùæÂºÄJOGÊåâÈíÆ
 *
 * Â¶ÇÊûúPLCÊú™ËøûÊé•ÔºåÂàô‰∏çÊâßË°å‰ªª‰ΩïÊìç‰Ωú„ÄÇ
 */
void JogControlPage::onJogForwardReleased()
{
    if (!m_modbusManager || !m_modbusManager->isConnected()) return;
    m_modbusManager->setSingleAxisJog(0); // 0 = ÂÅúÊ≠¢
    addLogEntry("JOGÂâçËøõÊùæÂºÄ", "info");
}

void JogControlPage::onJogBackwardPressed()
{
    if (!m_modbusManager || !m_modbusManager->isConnected()) return;

    m_modbusManager->setSingleAxisRunMode(false);
    m_modbusManager->setSingleAxisJogSpeed(m_speedSpinBox->value());
    m_modbusManager->setSingleAxisJogPosition(m_jogStepSpinBox->value());
    m_modbusManager->setSingleAxisJog(1); // 1 = ÂêëÂ∑¶/ÂêéÈÄÄ
    addLogEntry("JOGÂêéÈÄÄÊåâ‰∏ã", "info");
}

void JogControlPage::onJogBackwardReleased()
{
    if (!m_modbusManager || !m_modbusManager->isConnected()) return;
    m_modbusManager->setSingleAxisJog(0); // 0 = ÂÅúÊ≠¢
    addLogEntry("JOGÂêéÈÄÄÊùæÂºÄ", "info");
}

void JogControlPage::startLongPressDetection(bool isForward)
{

    if (m_isContinuousJogging) {
        return;  // Â¶ÇÊûúÂ∑≤ÁªèÂú®ËøûÁª≠JOG‰∏≠ÔºåÂøΩÁï•Êñ∞ÁöÑÊåâ‰∏ã‰∫ã‰ª∂
    }

    m_isLongPressing = true;
    m_jogDirection = isForward;

    // ÂêØÂä®ÈïøÊåâÊ£ÄÊµãÂÆöÊó∂Âô®
    m_longPressTimer->start(LONG_PRESS_THRESHOLD);

    //addLogEntry(QString("Ê£ÄÊµãÂà∞%1ÊåâÈíÆÊåâ‰∏ã").arg(isForward ? "ÂâçËøõ" : "ÂêéÈÄÄ"), "info"); Ëøô‰∏™Êó•ÂøóËæìÂá∫Â§™È¢ëÁπÅ‰∫ÜÔºåÂª∫ËÆÆ‰∏çË¶ÅÂºÄÂêØ
}

void JogControlPage::stopLongPressDetection()
{
    bool wasLongPressing = m_isLongPressing;
    bool wasContinuous = m_isContinuousJogging;

    m_isLongPressing = false;
    m_longPressTimer->stop();

    if (m_isContinuousJogging) {
        // ÂÅúÊ≠¢ËøûÁª≠JOG
        m_isContinuousJogging = false;
        m_continuousJogTimer->stop();
        addLogEntry(QString("ÂÅúÊ≠¢ËøûÁª≠%1").arg(m_jogDirection ? "ÂâçËøõ" : "ÂêéÈÄÄ"), "info");

        // Á°Æ‰øùÂú®PLCÊ®°Âºè‰∏ãÂèëÈÄÅÂÅúÊ≠¢ÂëΩ‰ª§
        if (m_modbusManager && m_modbusManager->isConnected()) {
            m_modbusManager->setSingleAxisJog(0); // 0 = ÂÅúÊ≠¢
        }

        // Á´ãÂç≥Êõ¥Êñ∞UIÊòæÁ§∫
        updateMoverInfo();

    } else if (wasLongPressing && !wasContinuous) {
        addLogEntry("ÂÆåÊàê‰∏ÄÊ¨°ÂçïÂáªJOGÊìç‰Ωú", "info");
    }
}

void JogControlPage::startContinuousJog()
{
    if (!m_isLongPressing) {
        return;  // Â¶ÇÊûú‰∏çÂú®ÈïøÊåâÁä∂ÊÄÅÔºå‰∏çÂêØÂä®ËøûÁª≠JOG
    }

    m_isContinuousJogging = true;
    addLogEntry(QString("ÂºÄÂßãËøûÁª≠%1").arg(m_jogDirection ? "ÂâçËøõ" : "ÂêéÈÄÄ"), "success");

    // Á´ãÂç≥ÊâßË°å‰∏ÄÊ¨°JOG
    performContinuousJog();

    // ÂêØÂä®ËøûÁª≠JOGÂÆöÊó∂Âô®
    m_continuousJogTimer->start(CONTINUOUS_JOG_INTERVAL);
}

void JogControlPage::performContinuousJog()
{
    if (!m_isContinuousJogging || !m_modbusManager || !m_modbusManager->isConnected()) return;
    m_modbusManager->setSingleAxisJog(m_jogDirection ? 2 : 1);
}

void JogControlPage::onGoToPosition()
{
    if (!m_modbusManager || !m_modbusManager->isConnected()) {
        QMessageBox::warning(this, "PLCÊú™ËøûÊé•", "ËØ∑ÂÖàËøûÊé•PLCËÆæÂ§áÔºÅ");
        return;
    }
    double targetPos = m_targetPosSpinBox->value();
    qint32 targetSpeed = m_speedSpinBox->value();
    addLogEntry(QString("ÂèëÈÄÅÁªùÂØπÂÆö‰ΩçÂëΩ‰ª§: ‰ΩçÁΩÆ=%1 mm, ÈÄüÂ∫¶=%2 mm/s").arg(targetPos).arg(targetSpeed), "info");

    // ‰ΩøÁî®Êñ∞Êé•Âè£ÊâßË°åÁªùÂØπÂÆö‰Ωç
    m_modbusManager->setSingleAxisRunMode(true);
    m_modbusManager->setSingleAxisAutoSpeed(targetSpeed);
    m_modbusManager->setSingleAxisJogPosition(static_cast<qint16>(targetPos)); // ÂÅáËÆæ‰ΩçÁΩÆÁî®16‰ΩçÂØÑÂ≠òÂô®
    m_modbusManager->setSingleAxisAutoRun(true);
}

/**
 * @brief ÂÅúÊ≠¢Âä®Â≠êËøêÂä®
 *
 * Â¶ÇÊûúPLCÊú™ËøûÊé•ÔºåÂàôÂºπÂá∫Ë≠¶ÂëäÂπ∂ËøîÂõû„ÄÇ
 */
void JogControlPage::onStopMover()
{
    if (!m_modbusManager || !m_modbusManager->isConnected()) {
        QMessageBox::warning(this, "PLCÊú™ËøûÊé•", "ËØ∑ÂÖàËøûÊé•PLCËÆæÂ§áÔºÅ");
        return;
    }
    addLogEntry("ÂèëÈÄÅÂÅúÊ≠¢ÂëΩ‰ª§", "warning");

    // ‰ΩøÁî®Êñ∞Êé•Âè£ÂÅúÊ≠¢ÊâÄÊúâËøêÂä®
    m_modbusManager->setSingleAxisJog(0);
    m_modbusManager->setSingleAxisAutoRun(false);
}

void JogControlPage::updateMoverInfo()
{
    if (!m_movers || m_movers->isEmpty()) {
        qWarning() << "updateMoverInfo: Âä®Â≠êÂàóË°®‰∏∫Á©∫";
        return;
    }

    if (m_selectedMover >= 0 && m_selectedMover < m_movers->size()) {
        try {
            const MoverData &mover = (*m_movers)[m_selectedMover];

            if (m_positionLabel) {
                m_positionLabel->setText(QString("%1 mm").arg(mover.position, 0, 'f', 1));
            }
            if (m_speedLabel) {
                m_speedLabel->setText(QString("%1 mm/s").arg(mover.speed, 0, 'f', 1));
            }
        } catch (const std::exception& e) {
            qCritical() << "updateMoverInfo ÂºÇÂ∏∏Ôºö" << e.what();
        } catch (...) {
            qCritical() << "updateMoverInfo ÂèëÁîüÊú™Áü•ÂºÇÂ∏∏";
        }
    }
}

bool JogControlPage::checkCollision(int moverId, double targetPosition)
{
    if (!m_movers || moverId < 0 || moverId >= m_movers->size()) {
        return false;
    }

    // ÂçïÂä®Â≠êÁ≥ªÁªü‰∏çÈúÄË¶ÅÁ¢∞ÊíûÊ£ÄÊµã
    if (m_movers->size() == 1) {
        return true;
    }

    try {
        // Â§öÂä®Â≠êÁ≥ªÁªüÁöÑÁ¢∞ÊíûÊ£ÄÊµã
        for (int i = 0; i < m_movers->size(); ++i) {
            if (i == moverId) continue;

            double otherPosition = (*m_movers)[i].position;
            double distance = calculateShortestDistance(targetPosition, otherPosition);

            if (distance < SAFETY_DISTANCE) {
                qDebug() << QString("Á¢∞ÊíûÊ£ÄÊµãÔºöÂä®Â≠ê%1ÁõÆÊ†á‰ΩçÁΩÆ%2mm‰∏éÂä®Â≠ê%3ÂΩìÂâç‰ΩçÁΩÆ%4mmË∑ùÁ¶ªËøáËøë(%5mm < %6mm)")
                                .arg(moverId).arg(targetPosition, 0, 'f', 1)
                                .arg(i).arg(otherPosition, 0, 'f', 1)
                                .arg(distance, 0, 'f', 1).arg(SAFETY_DISTANCE);
                return false;
            }
        }
        return true;
    } catch (...) {
        return false;
    }
}

double JogControlPage::calculateShortestDistance(double pos1, double pos2)
{
    double directDistance = qAbs(pos1 - pos2);
    double wrapDistance = TRACK_LENGTH - directDistance;
    return qMin(directDistance, wrapDistance);
}

double JogControlPage::normalizePosition(double position)
{
    while (position < 0) position += TRACK_LENGTH;
    while (position >= TRACK_LENGTH) position -= TRACK_LENGTH;
    return position;
}

/**
 * @brief Êõ¥Êñ∞ÊâÄÊúâUIÁªÑ‰ª∂‰ª•ÂèçÊò†ÊúÄÊñ∞ÁöÑÂä®Â≠êÊï∞ÊçÆ
 */
void JogControlPage::updateMovers(const QList<MoverData> &movers)
{
    if (!m_movers) return;
    *m_movers = movers;
    if (m_trackWidget) {
        m_trackWidget->updateMovers(*m_movers);
    }
    updateMoverInfo();
    if (m_selectedMover >= 0 && m_selectedMover < m_movers->size()) {
        updateEnableStatusDisplay((*m_movers)[m_selectedMover].isEnabled);
    }
}

void JogControlPage::onMoverSelectionChanged(int index)
{
    if (!m_movers || index < 0 || index >= m_movers->size()) {
        qWarning() << "onMoverSelectionChanged: Êó†ÊïàÁöÑÂä®Â≠êÁ¥¢ÂºïÔºö" << index;
        return;
    }

    try {
        // ÂàáÊç¢Âä®Â≠êÊó∂ÂÅúÊ≠¢ÂΩìÂâçÁöÑJOGÊìç‰Ωú
        stopLongPressDetection();

        m_selectedMover = index;
        updateMoverInfo();

        if (m_targetPosSpinBox) {
            m_targetPosSpinBox->setValue((*m_movers)[index].position);
        }

        addLogEntry(QString("Â∑≤ÈÄâÊã©Âä®Â≠ê %1").arg(index), "info");
        // Âú®ËøôÈáåÊ∑ªÂä†‰ª•‰∏ã‰∏§Ë°å‰ª£Á†ÅÔºö
        const MoverData &mover = (*m_movers)[index];
        updateEnableStatusDisplay(mover.isEnabled);
    } catch (const std::exception& e) {
        qCritical() << "onMoverSelectionChanged ÂºÇÂ∏∏Ôºö" << e.what();
    } catch (...) {
        qCritical() << "onMoverSelectionChanged ÂèëÁîüÊú™Áü•ÂºÇÂ∏∏";
    }
}

/**
 * @brief ‰ΩøËÉΩ/Á¶ÅÁî®Âä®Â≠ê
 *
 * Â¶ÇÊûúPLCÊú™ËøûÊé•ÔºåÂàôÂºπÂá∫Ë≠¶ÂëäÂπ∂ËøîÂõû„ÄÇ
 * Ë∞ÉÁî®ModbusManagerÁöÑÈ´òÁ∫ßÊé•Âè£ÂêëPLCÂèëÈÄÅÂëΩ‰ª§„ÄÇ
 */
void JogControlPage::onEnableStateChanged(bool enabled)
{
    if (!m_modbusManager || !m_modbusManager->isConnected()) {
        QMessageBox::warning(this, "PLCÊú™ËøûÊé•", "ËØ∑ÂÖàËøûÊé•PLCËÆæÂ§áÔºÅ");
        return;
    }
    // Ë∞ÉÁî®Êñ∞Êé•Âè£
    bool success = m_modbusManager->setSingleAxisEnable(enabled);
    if (success) {
        addLogEntry(QString("Âä®Â≠ê%1 %2 ÂëΩ‰ª§Â∑≤ÂèëÈÄÅ").arg(m_selectedMover).arg(enabled ? "‰ΩøËÉΩ" : "Á¶ÅÁî®"), "success");
    } else {
        addLogEntry(QString("Âä®Â≠ê%1 %2 ÂëΩ‰ª§ÂèëÈÄÅÂ§±Ë¥•").arg(m_selectedMover).arg(enabled ? "‰ΩøËÉΩ" : "Á¶ÅÁî®"), "error");
    }
}

// Êõ¥Êñ∞‰ΩøËÉΩÁä∂ÊÄÅÊòæÁ§∫
void JogControlPage::updateEnableStatusDisplay(bool enabled)
{
    if (m_enableStatusLabel) {
        if (enabled) {
            m_enableStatusLabel->setText("Áä∂ÊÄÅ: Â∑≤‰ΩøËÉΩ");
            m_enableStatusLabel->setStyleSheet(R"(
                QLabel {
                    color: #22c55e;
                    font-size: 13px;
                    font-weight: bold;
                    background-color: rgba(34, 197, 94, 0.1);
                    border: 1px solid rgba(34, 197, 94, 0.3);
                    border-radius: 4px;
                    padding: 5px 10px;
                }
            )");
        } else {
            m_enableStatusLabel->setText("Áä∂ÊÄÅ: Â∑≤Á¶ÅÁî®");
            m_enableStatusLabel->setStyleSheet(R"(
                QLabel {
                    color: #ef4444;
                    font-size: 13px;
                    font-weight: bold;
                    background-color: rgba(239, 68, 68, 0.1);
                    border: 1px solid rgba(239, 68, 68, 0.3);
                    border-radius: 4px;
                    padding: 5px 10px;
                }
            )");
        }
    }

    // Ê†πÊçÆ‰ΩøËÉΩÁä∂ÊÄÅÊéßÂà∂Êìç‰ΩúÊåâÈíÆ
    if (m_enableBtn && m_disableBtn) {
        m_enableBtn->setEnabled(!enabled);
        m_disableBtn->setEnabled(enabled);
    }

    // ÊéßÂà∂JogÊåâÈíÆÁä∂ÊÄÅ
    bool canJog = enabled && (m_movers && m_selectedMover >= 0 && m_selectedMover < m_movers->size());
    if (m_jogForwardBtn) m_jogForwardBtn->setEnabled(canJog);
    if (m_jogBackwardBtn) m_jogBackwardBtn->setEnabled(canJog);
    if (m_goToBtn) m_goToBtn->setEnabled(canJog);
}

void JogControlPage::onEmergencyStopTriggered()
{
    m_emergencyActive = true;

    // Á´ãÂç≥ÂÅúÊ≠¢ÊâÄÊúâJOGÊìç‰Ωú
    stopLongPressDetection();

    // Á¶ÅÁî®ÊâÄÊúâÊéßÂà∂ÊåâÈíÆ
    // ÂÅúÊ≠¢Ëá™Âä®ËøêË°å
    if (m_isAutoRunActive) {onAutoRunStop();}
    if (m_jogForwardBtn) m_jogForwardBtn->setEnabled(false);
    if (m_jogBackwardBtn) m_jogBackwardBtn->setEnabled(false);
    if (m_goToBtn) m_goToBtn->setEnabled(false);
    if (m_enableBtn) m_enableBtn->setEnabled(false);
    if (m_disableBtn) m_disableBtn->setEnabled(false);
    // Á¶ÅÁî®Ëá™Âä®ËøêË°åÊéß‰ª∂
    if (m_autoRunGroup) m_autoRunGroup->setEnabled(false);

    // ÊîπÂèòÈ°µÈù¢ËÉåÊôØËâ≤ÊèêÁ§∫ÊÄ•ÂÅúÁä∂ÊÄÅ
    setStyleSheet("QWidget { background-color: rgba(239, 68, 68, 0.1); }");

    addLogEntry("‚ö†Ô∏è ÂìçÂ∫îÊÄ•ÂÅú‰ø°Âè∑ - ÊâÄÊúâÊìç‰ΩúÂ∑≤Á¶ÅÁî®", "error");
}

void JogControlPage::onEmergencyStopReset()
{
    m_emergencyActive = false;

    // ÈáçÊñ∞ÂêØÁî®ÊéßÂà∂ÊåâÈíÆ
    if (m_jogForwardBtn) m_jogForwardBtn->setEnabled(true);
    if (m_jogBackwardBtn) m_jogBackwardBtn->setEnabled(true);
    if (m_goToBtn) m_goToBtn->setEnabled(true);
    if (m_enableBtn) m_enableBtn->setEnabled(true);
    if (m_disableBtn) m_disableBtn->setEnabled(true);
    // ÈáçÊñ∞ÂêØÁî®Ëá™Âä®ËøêË°åÊéß‰ª∂
    if (m_autoRunGroup) m_autoRunGroup->setEnabled(true);

    // ÊÅ¢Â§çÊ≠£Â∏∏ËÉåÊôØ
    setStyleSheet("");
    addLogEntry("‚úÖ ÊÄ•ÂÅúÂ∑≤ÈáçÁΩÆ - Êìç‰ΩúÊùÉÈôêÂ∑≤ÊÅ¢Â§ç", "success");
}

// ÂêØÂä®ÂÆûÊó∂Êï∞ÊçÆÊõ¥Êñ∞
/**
 * @brief ÂêØÂä®ÂÆûÊó∂Êï∞ÊçÆÊõ¥Êñ∞ÂÆöÊó∂Âô®
 */
void JogControlPage::startRealTimeUpdates()
{
    if (!m_isRealTimeEnabled && m_modbusManager && m_modbusManager->isConnected()) {
        m_isRealTimeEnabled = true;
        m_realTimeUpdateTimer->start();
        setControlsEnabled(true); // ÂêØÁî®Êéß‰ª∂
        addLogEntry("ÂêØÂä®ÂÆûÊó∂Êï∞ÊçÆÊõ¥Êñ∞", "info");
    }
}

// ÂÅúÊ≠¢ÂÆûÊó∂Êï∞ÊçÆÊõ¥Êñ∞
/**
 * @brief ÂÅúÊ≠¢ÂÆûÊó∂Êï∞ÊçÆÊõ¥Êñ∞
 */
void JogControlPage::stopRealTimeUpdates()
{
    if (m_isRealTimeEnabled) {
        m_isRealTimeEnabled = false;
        m_realTimeUpdateTimer->stop();
        setControlsEnabled(false); // Á¶ÅÁî®Êéß‰ª∂
        addLogEntry("ÂÅúÊ≠¢ÂÆûÊó∂Êï∞ÊçÆÊõ¥Êñ∞", "info");
    }
}

// ÂÆûÊó∂Êï∞ÊçÆÊõ¥Êñ∞Â§ÑÁêÜ
/**
 * @brief ÂÆöÊó∂Âô®Ëß¶ÂèëÁöÑÂÆûÊó∂Êï∞ÊçÆÊõ¥Êñ∞ÂáΩÊï∞
 *
 * ÂÆåÂÖ®‰æùËµñModbusManager‰ªéPLCÊâπÈáèËØªÂèñÊâÄÊúâÂä®Â≠êÁöÑÊúÄÊñ∞Êï∞ÊçÆ„ÄÇ
 */
void JogControlPage::onRealTimeDataUpdate()
{
    if (!m_modbusManager || !m_modbusManager->isConnected() || !m_movers) {
        stopRealTimeUpdates();
        return;
    }
    m_modbusManager->readAllMoverData(*m_movers);
    updateMovers(*m_movers);
}

void JogControlPage::addLogEntry(const QString &message, const QString &type)
{
    // 1. Ê∑ªÂä†Âà∞Êú¨È°µÈù¢ÁöÑÊó•Âøó
    m_logWidget->addLogEntry(message, type, m_currentUser);

    // 2. ËΩ¨ÂèëÂà∞ÂÖ®Â±ÄÊó•Âøó
    if (m_mainWindow) {
        m_mainWindow->addGlobalLogEntry(QString("[JogÊéßÂà∂] %1").arg(message), type);
    }
}
